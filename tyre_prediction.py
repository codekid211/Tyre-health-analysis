# -*- coding: utf-8 -*-
"""final Tyre_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13wvpMb9wVw2cWZUgWuKftgAba6YZgZMn

#Tire Wear Prediction
"""

import numpy as np
import pandas as pd

import os

import time
import matplotlib.pyplot as plt
from fastai.vision.all import *
import torch
import numpy as np
import random
from sklearn.metrics import roc_curve, auc

from google.colab import drive
drive.mount('/content/drive')

path = Path('/content/drive/MyDrive/Digital images of defective and good condition tyres/')

# Get image files and labels
image_files = get_image_files(path)
labels = [parent_label(img) for img in image_files]

# Verify the labels
print(labels[:20])

# X is the list of image file paths, and y is the list of labels
X = [str(img) for img in image_files]
y = labels

from fastai.vision.all import *


path = Path('/content/drive/MyDrive/Digital images of defective and good condition tyres/')

data = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    get_items=get_image_files,
    splitter=RandomSplitter(valid_pct=0.5, seed=42),
    get_y=parent_label,
    item_tfms=Resize(460),
    batch_tfms=[*aug_transforms(size=224, max_warp=0), Normalize.from_stats(*imagenet_stats)]
)

dls = data.dataloaders(path)

dls.show_batch(max_n=6)
print(f"Number of training examples: {len(dls.train_ds)}, Number of validation examples: {len(dls.valid_ds)}")

from skimage import io
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import numpy as np
from skimage import io, transform

from fastai.vision.all import get_image_files, parent_label

target_size = (100, 100)
X_images = [transform.resize(io.imread(img), target_size) for img in X]

X_flattened = [img.flatten() for img in X_images]

if len(set(len(img_flat) for img_flat in X_flattened)) != 1:
    print("Error: Flattened arrays have different lengths. Please check your data.")
else:

    X_flattened = np.array(X_flattened)
    X_train, X_test, y_train, y_test = train_test_split(X_flattened, y, test_size=0.2, random_state=42)
    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy:.4f}")

from sklearn.ensemble import AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier, BaggingClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from xgboost import XGBClassifier

classifiers = {
        'Random Forest': RandomForestClassifier(),
        'SVM': SVC(),
        'KNN': KNeighborsClassifier(),
        'Decision Tree': DecisionTreeClassifier(),
        'Logistic Regression': LogisticRegression(max_iter=1000),
        'Naive Bayes': GaussianNB(),
        'MLP': MLPClassifier(),
        'AdaBoost': AdaBoostClassifier(),
        'Extra Trees': ExtraTreesClassifier(),
        'Bagging': BaggingClassifier(),
        'Multinomial Naive Bayes': MultinomialNB(),
        'Bernoulli Naive Bayes': BernoulliNB(),
        'Linear Discriminant Analysis': LinearDiscriminantAnalysis(),



    }

    for name, clf in classifiers.items():
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print(f"{name} Accuracy: {accuracy:.4f}")

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

for name, clf in classifiers.items():
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    confusion_mat = confusion_matrix(y_test, y_pred)
    classification_rep = classification_report(y_test, y_pred)

    print(f"{name} Metrics:")
    print(f"Accuracy: {accuracy:.4f}")
    print("Confusion Matrix:")
    print(confusion_mat)
    print("Classification Report:")
    print(classification_rep)
    print("="*40)

!pip install fileupload

import io
import fileupload
from IPython.display import display

from google.colab import files
from PIL import Image
import io
from sklearn.linear_model import LogisticRegression
from skimage import io, transform
from sklearn.model_selection import train_test_split
import numpy as np

best_model = ExtraTreesClassifier()
best_model.fit(X_train, y_train)

uploaded = files.upload()

uploaded_file = next(iter(uploaded))

image = Image.open(uploaded_file)
display(image)

processed_image = transform.resize(np.array(image), target_size).flatten().reshape(1, -1)

prediction = best_model.predict(processed_image)

print(f"Prediction: {prediction[0]}")